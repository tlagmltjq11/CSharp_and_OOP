/*

GoF's의 디자인 패턴 분류
생성 패턴 - 5가지
구조 패턴 - 7가지
행위 패턴 - 11가지



// ★ 핵심 ★
1. A, B를 묶으려면 기반 클래스가 있어야 한다.
2. 변하지 않는 코드에서 변해야 하는 부분은 분리되어야 한다.
3. 복잡한 문제가 있을 때, 중간에 간접층을 넣어 해결한다.. 
등 핵심적인 내용들을 숙지해야 한다.



// 생성 패턴 5가지
Singleton : 클래스의 인스턴스는 오직 하나임을 보장하며 이에 대한 접근은 전역적으로 제공

Abstract Factory : 상세화된 서브 클래스를 정의하지 않고도 서로 관련성이 있거나 독립적인
여러 객체의 군을 생성하기 위한 인터페이스를 제공

Prototype : 견본적 인스턴스를 사용하여 생성할 객체의 종류를 명시하고 이러한 견본을 복사하여
새로운 객체를 생성한다.

Builder : 복잡한 객체를 생성하는 방법과 표현하는 방법을 정의하는 클래스를 별도로 분리하여
서로 다른 표현이라도 이를 생성할 수 있는 동일한 구축 공정을 제공할 수 있도록 한다.

Factory Method : 객체를 생성하기 위해 인터페이스를 정의 하지만, 어떤 클래스의 인스턴스를
생성할 지에 대한 결정은 서브 클래스가 한다. 클래스의 인스턴스를 만드는 시점을 서브 클래스로 미룬다.




// 구조 패턴 7가지
문제를 해결하기 위해 간접층을 만드는 패턴 : Adapter, Proxy, Bridge, Facade

재귀적 포함을 사용하는 패턴 : Composite, Decorator

다루진 않았지만 Flyweight




// 행위 패턴 11가지
template method, strategy, state, iterator, visitor, observer..

다루진 않았지만 command, memento, interpert, mediator, chain of responsibility 가 존재



*/